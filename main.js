(()=>{"use strict";const e=async e=>{const t=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${e}&appid=a0c9839361f301aa4ff8bb089dde2d79`);return 200===t.status?await t.json():Promise.reject(t)},t=async()=>{const e=Math.floor(508061*Math.random())-1,t=await fetch(`https://wft-geo-db.p.rapidapi.com/v1/geo/cities?limit=1&includeDeleted=NONE&offset=${e}`,{method:"GET",headers:{"X-RapidAPI-Key":"807ea18ec2msh3a2175b27cf041dp170feajsnf745f5536e94","X-RapidAPI-Host":"wft-geo-db.p.rapidapi.com"}});return 200===t.status?await t.json():Promise.reject(t)},r=(()=>{const e=e=>e.main.temp;return{getTemperatureFahrenheit:t=>{const r=9*(e(t)-273.15)/5+32;return Math.round(100*r)/100},getTemperatureCelsius:t=>{const r=e(t)-273.15;return Math.round(100*r)/100},getWeatherMain:e=>e.weather[0].main,getWeatherDescription:e=>e.weather[0].description,getWeatherIconCode:e=>e.weather[0].icon,getCityName:e=>e.name,getRandomCityName:e=>e.data[0].city}})(),o=e=>{(e=>{const t=r.getWeatherIconCode(e);document.querySelector(".weather-icon").src=`http://openweathermap.org/img/wn/${t}.png`})(e),(e=>{const t=r.getWeatherMain(e);document.querySelector(".weather-main").textContent=t})(e),(e=>{const t=r.getWeatherDescription(e);document.querySelector(".weather-description").textContent=t})(e),(e=>{const t=r.getTemperatureFahrenheit(e);document.querySelector(".temp-f").textContent=`${t}째F`})(e),(e=>{const t=r.getTemperatureCelsius(e);document.querySelector(".temp-c").textContent=`${t}째C`})(e),(e=>{const t=r.getCityName(e);document.querySelector(".city-name").textContent=t})(e),document.querySelector("#city").value=""},n=()=>{const e=document.querySelector(".weather-icon"),t=document.querySelector(".weather-main"),r=document.querySelector(".weather-description"),o=document.querySelector(".temp-f"),n=document.querySelector(".temp-c"),a=document.querySelector(".city-name");e.src="../dist/mickey.png",t.textContent="The sun might or might not be visible",r.textContent="hopefully the sky is still blue",o.textContent="Larger number째F",n.textContent="Smaller number째C",a.textContent="Disneyland"},a=e=>{document.querySelector(".error-message").textContent=e},s=e=>{!1===e.disabled?e.disabled=!0:e.disabled=!1},c=(()=>{const n=async()=>{const t=document.querySelector("#city").value;if(""!==t)try{const r=await e(t);o(r)}catch(e){404===e.status?a("Uh oh, looks like something went wrong! Check your spelling or try a different city!"):429===e.status?a("Whoa, slow down there partner! Save some weather data for the rest of us!"):500===e.status&&a("Something out of our control is broken. Try again later!"),console.error(Error(e.statusText))}},c=async()=>{let n,i;const u=document.querySelector(".random-button");try{const a=await t();n=r.getRandomCityName(a),i=await e(n),o(i),s(u)}catch(e){404===e.status&&void 0===n?a("Hmm, it seems like we're running into some trouble. Try again!"):404===e.status&&void 0===i||429===e.status?setTimeout(c,1500):500===e.status&&a("Something out of our control is broken. Try again later!"),console.error(Error(`${e.status} ${e.statusText}`))}};return{addUserInputListener:()=>{const e=document.querySelector(".search-button"),t=document.querySelector("#city"),r=document.querySelector(".random-button");e.addEventListener("click",n),t.addEventListener("keydown",(e=>{"Enter"===e.key&&n()})),r.addEventListener("click",(()=>{s(r),c()}))}}})();!async function(){try{const t=await e("Hell");o(t)}catch(e){n(),console.error(Error(`${e.status} ${e.statusText}. If you can see this, that means there was an issue with the OpenWeatherMap API!`))}}(),c.addUserInputListener()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,