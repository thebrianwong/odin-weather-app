(()=>{"use strict";const e=async e=>{const t=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${e}&appid=a0c9839361f301aa4ff8bb089dde2d79`);return 200===t.status?await t.json():Promise.reject(t)},t=async()=>{const e=Math.floor(508061*Math.random())-1,t=await fetch(`https://wft-geo-db.p.rapidapi.com/v1/geo/cities?limit=1&includeDeleted=NONE&offset=${e}`,{method:"GET",headers:{"X-RapidAPI-Key":"807ea18ec2msh3a2175b27cf041dp170feajsnf745f5536e94","X-RapidAPI-Host":"wft-geo-db.p.rapidapi.com"}});return 200===t.status?await t.json():Promise.reject(t)},n=(()=>{const e=e=>e.main.temp;return{getTemperatureFahrenheit:t=>{const n=9*(e(t)-273.15)/5+32;return Math.round(100*n)/100},getTemperatureCelsius:t=>{const n=e(t)-273.15;return Math.round(100*n)/100},getWeatherMain:e=>e.weather[0].main,getWeatherDescription:e=>e.weather[0].description,getWeatherIconCode:e=>e.weather[0].icon,getCityName:e=>e.name,getRandomCityName:e=>e.data[0].city}})(),r=e=>{(e=>{const t=n.getWeatherIconCode(e);document.querySelector(".weather-icon").src=`http://openweathermap.org/img/wn/${t}.png`})(e),(e=>{const t=n.getWeatherMain(e);document.querySelector(".weather-main").textContent=t})(e),(e=>{const t=n.getWeatherDescription(e);document.querySelector(".weather-description").textContent=t})(e),(e=>{const t=n.getTemperatureFahrenheit(e);document.querySelector(".temp-f").textContent=`${t}째F`})(e),(e=>{const t=n.getTemperatureCelsius(e);document.querySelector(".temp-c").textContent=`${t}째C`})(e),(e=>{const t=n.getCityName(e);document.querySelector(".city-name").textContent=t})(e),document.querySelector("#city").value=""},o=()=>{const e=document.querySelector(".weather-icon"),t=document.querySelector(".weather-main"),n=document.querySelector(".weather-description"),r=document.querySelector(".temp-f"),o=document.querySelector(".temp-c"),a=document.querySelector(".city-name");e.src="../dist/mickey.png",t.textContent="The sun might or might not be visible",n.textContent="hopefully the sky is still blue",r.textContent="Larger number째F",o.textContent="Smaller number째C",a.textContent="Disneyland"},a=e=>{document.querySelector(".error-message").textContent=e},c=e=>{!1===e.disabled?e.disabled=!0:e.disabled=!1},s=(()=>{const o=async()=>{const t=document.querySelector("#city").value;if(""!==t)try{const n=await e(t);r(n)}catch(e){a("Uh oh, looks like something went wrong! Check your spelling then try again!"),console.error(Error(e.statusText))}},s=async()=>{let o,i;const u=document.querySelector(".random-button");try{const a=await t();o=n.getRandomCityName(a),i=await e(o),r(i),c(u)}catch(e){404===e.status&&void 0===o?a("Hmm, it seems like we're running into some trouble. Try again!"):404===e.status&&void 0===i&&setTimeout(s,1500),console.error(Error(`${e.status} ${e.statusText}`))}};return{addUserInputListener:()=>{const e=document.querySelector(".search-button"),t=document.querySelector("#city"),n=document.querySelector(".random-button");e.addEventListener("click",o),t.addEventListener("keydown",(e=>{"Enter"===e.key&&o()})),n.addEventListener("click",(()=>{c(n),s()}))}}})();!async function(){try{const t=await e("Hell");r(t)}catch(e){o(),console.error(Error(`${e.status} ${e.statusText}. If you can see this, that means there was an issue with the OpenWeatherMap API!`))}}(),s.addUserInputListener()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,