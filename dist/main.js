(()=>{"use strict";const e=async e=>{const t=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${e}&appid=a0c9839361f301aa4ff8bb089dde2d79`);return 200===t.status?await t.json():Promise.reject(t)},t=async()=>{const e=Math.floor(508061*Math.random())-1,t=await fetch(`https://wft-geo-db.p.rapidapi.com/v1/geo/cities?limit=1&includeDeleted=NONE&offset=${e}`,{method:"GET",headers:{"X-RapidAPI-Key":"807ea18ec2msh3a2175b27cf041dp170feajsnf745f5536e94","X-RapidAPI-Host":"wft-geo-db.p.rapidapi.com"}});return 200===t.status?await t.json():Promise.reject(t)},r=(()=>{const e=e=>e.main.temp;return{getTemperatureFahrenheit:t=>{const r=9*(e(t)-273.15)/5+32;return Math.round(100*r)/100},getTemperatureCelsius:t=>{const r=e(t)-273.15;return Math.round(100*r)/100},getWeatherMain:e=>e.weather[0].main,getWeatherDescription:e=>e.weather[0].description,getWeatherIconCode:e=>e.weather[0].icon,getCityName:e=>e.name,getRandomCityName:e=>e.data[0].city}})(),o=(()=>{let e=!1;const t=e=>{e.classList.toggle("not-displayed")},o=e=>{document.querySelector(".loading-message").textContent=e},a=e=>new Promise((t=>setTimeout(t,e)));return{updateDisplayedWeather:e=>{(e=>{const t=r.getWeatherIconCode(e);document.querySelector(".weather-icon").src=`http://openweathermap.org/img/wn/${t}.png`})(e),(e=>{const t=r.getWeatherMain(e);document.querySelector(".weather-main").textContent=t})(e),(e=>{const t=r.getWeatherDescription(e);document.querySelector(".weather-description").textContent=t})(e),(e=>{const t=r.getTemperatureFahrenheit(e);document.querySelector(".temp-f").textContent=`${t}째F`})(e),(e=>{const t=r.getTemperatureCelsius(e);document.querySelector(".temp-c").textContent=`${t}째C`})(e),(e=>{const t=r.getCityName(e);document.querySelector(".city-name").textContent=t})(e),document.querySelector("#city").value=""},addPlaceholderValues:()=>{const e=document.querySelector(".weather-icon"),t=document.querySelector(".weather-main"),r=document.querySelector(".weather-description"),o=document.querySelector(".temp-f"),a=document.querySelector(".temp-c"),n=document.querySelector(".city-name");e.src="../dist/mickey.png",t.textContent="The sun might or might not be visible",r.textContent="hopefully the sky is still blue",o.textContent="Larger number째F",a.textContent="Smaller number째C",n.textContent="Disneyland"},changeErrorMessage:e=>{document.querySelector(".error-message").textContent=e},toggleElementDisplay:t,toggleLoadingInProgress:()=>{const r=document.querySelector("#loading-indicator");Array.from(document.querySelectorAll(".submission-element")).forEach((e=>{!1===e.disabled?e.disabled=!0:e.disabled=!1})),t(r),(async()=>{const t=document.querySelector("#loading-indicator");for(e=!e;e;){if(await a(1e3),Array.from(t.classList).includes("not-displayed")){o("Loading...");break}if(o("Loading."),await a(1e3),Array.from(t.classList).includes("not-displayed")){o("Loading...");break}o("Loading.."),await a(1e3),o("Loading...")}})()}}})(),a=(()=>{const a=async()=>{const t=document.querySelector("#city").value;if(""!==t)try{const r=await e(t);o.updateDisplayedWeather(r)}catch(e){404===e.status?o.changeErrorMessage("Uh oh, looks like something went wrong! Check your spelling or try a different city!"):429===e.status?o.changeErrorMessage("Whoa, slow down there partner! Save some weather data for the rest of us!"):500===e.status&&o.changeErrorMessage("Something out of our control is broken. Try again later!"),console.error(Error(e.statusText))}o.toggleLoadingInProgress()},n=async()=>{let a,s;try{const n=await t();a=r.getRandomCityName(n),s=await e(a),o.updateDisplayedWeather(s),o.toggleLoadingInProgress()}catch(e){404===e.status&&void 0===a?o.changeErrorMessage("Hmm, it seems like we're running into some trouble. Try again!"):404===e.status&&void 0===s||429===e.status?setTimeout(n,1500):500===e.status&&o.changeErrorMessage("Something out of our control is broken. Try again later!"),console.error(Error(`${e.status} ${e.statusText}`))}};return{addUserInputListeners:()=>{document.querySelector(".search-button").addEventListener("click",(()=>{o.changeErrorMessage(""),o.toggleLoadingInProgress(),a()})),document.querySelector("#city").addEventListener("keydown",(e=>{"Enter"===e.key&&(o.changeErrorMessage(""),o.toggleLoadingInProgress(),a())})),document.querySelector(".random-button").addEventListener("click",(()=>{o.changeErrorMessage(""),o.toggleLoadingInProgress(),n()})),(()=>{const e=Array.from(document.querySelectorAll(".temp-button"));e.forEach((t=>{t.addEventListener("click",(()=>{e.forEach((e=>{o.toggleElementDisplay(e)}))}))}))})()}}})();!async function(){try{const t=await e("Hell");o.updateDisplayedWeather(t)}catch(e){o.addPlaceholderValues(),console.error(Error(`${e.status} ${e.statusText}. If you can see this, that means there was an issue with the OpenWeatherMap API!`))}}(),a.addUserInputListeners()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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aEJnQixHQUFtQixJQUdhLE1BQ3BDLE1BQU1TLEVBQWN2QixNQUFNQyxLQUFLakMsU0FBU2tDLGlCQUFpQixpQkFDekRxQixFQUFZcEIsU0FBU3FCLElBQ25CQSxFQUFPSixpQkFBaUIsU0FBUyxLQUMvQkcsRUFBWXBCLFNBQVNxQixJQUNuQmhFLEVBQWdCRSxxQkFBcUI4RCxFQUFPLEdBQzVDLEdBQ0YsR0FDRixFQU1GQyxFQUErQixFQUdsQyxFQXBHaUIsSUNBbEIsaUJBQ0UsSUFDRSxNQUFNaEcsUUFBaUJILEVBQTBCLFFBQ2pEa0MsRUFBZ0JjLHVCQUF1QjdDLEVBUXpDLENBUEUsTUFBT2lGLEdBQ1BsRCxFQUFnQjhCLHVCQUNoQnFCLFFBQVFELE1BQ05FLE1BQ0UsR0FBR0YsRUFBTS9FLFVBQVUrRSxFQUFNRywrRkFHL0IsQ0FDRCxDQVpELEdBY0FOLEVBQVVZLHVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2Rpbi13ZWF0aGVyLWFwcC8uL3NyYy9BUElfcmVxdWVzdF9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vb2Rpbi13ZWF0aGVyLWFwcC8uL3NyYy9maWx0ZXJfZGF0YV9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vb2Rpbi13ZWF0aGVyLWFwcC8uL3NyYy9ET01fbWFuaXB1bGF0aW9uX21vZHVsZS5qcyIsIndlYnBhY2s6Ly9vZGluLXdlYXRoZXItYXBwLy4vc3JjL3VzZXJfaW5wdXRfbW9kdWxlLmpzIiwid2VicGFjazovL29kaW4td2VhdGhlci1hcHAvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQVBJUmVxdWVzdCA9ICgoKSA9PiB7XG4gIGNvbnN0IEFQSUtFWSA9IFwiYTBjOTgzOTM2MWYzMDFhYTRmZjhiYjA4OWRkZTJkNzlcIjtcbiAgY29uc3QgZ2V0Q2l0eVdlYXRoZXIgPSBhc3luYyAoY2l0eSkgPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXG4gICAgICBgaHR0cHM6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2RhdGEvMi41L3dlYXRoZXI/cT0ke2NpdHl9JmFwcGlkPSR7QVBJS0VZfWBcbiAgICApO1xuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgY29uc3QgcGFyc2VkT2JqZWN0ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgcmV0dXJuIHBhcnNlZE9iamVjdDtcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlc3BvbnNlKTtcbiAgfTtcbiAgY29uc3QgZ2V0UmFuZG9tQ2l0eSA9IGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBDSVRZQ09VTlQgPSA1MDgwNjE7XG4gICAgY29uc3QgcmFuZG9tQ2l0eUluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogQ0lUWUNPVU5UKSAtIDE7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgXCJYLVJhcGlkQVBJLUtleVwiOiBcIjgwN2VhMThlYzJtc2gzYTIxNzViMjdjZjA0MWRwMTcwZmVhanNuZjc0NWY1NTM2ZTk0XCIsXG4gICAgICAgIFwiWC1SYXBpZEFQSS1Ib3N0XCI6IFwid2Z0LWdlby1kYi5wLnJhcGlkYXBpLmNvbVwiLFxuICAgICAgfSxcbiAgICB9O1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXG4gICAgICBgaHR0cHM6Ly93ZnQtZ2VvLWRiLnAucmFwaWRhcGkuY29tL3YxL2dlby9jaXRpZXM/bGltaXQ9MSZpbmNsdWRlRGVsZXRlZD1OT05FJm9mZnNldD0ke3JhbmRvbUNpdHlJbmRleH1gLFxuICAgICAgb3B0aW9uc1xuICAgICk7XG4gICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICBjb25zdCBwYXJzZWRPYmplY3QgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICByZXR1cm4gcGFyc2VkT2JqZWN0O1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVzcG9uc2UpO1xuICB9O1xuICByZXR1cm4geyBnZXRDaXR5V2VhdGhlciwgZ2V0UmFuZG9tQ2l0eSB9O1xufSkoKTtcblxuZXhwb3J0IHsgQVBJUmVxdWVzdCB9O1xuIiwiY29uc3QgZmlsdGVyRGF0YSA9ICgoKSA9PiB7XG4gIGNvbnN0IGdldFRlbXBlcmF0dXJlID0gKGRhdGEpID0+IGRhdGEubWFpbi50ZW1wO1xuICBjb25zdCBnZXRUZW1wZXJhdHVyZUZhaHJlbmhlaXQgPSAoZGF0YSkgPT4ge1xuICAgIGNvbnN0IGtlbHZpbiA9IGdldFRlbXBlcmF0dXJlKGRhdGEpO1xuICAgIGNvbnN0IGZhaHJlbmhlaXQgPSAoKGtlbHZpbiAtIDI3My4xNSkgKiA5KSAvIDUgKyAzMjtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChmYWhyZW5oZWl0ICogMTAwKSAvIDEwMDtcbiAgfTtcbiAgY29uc3QgZ2V0VGVtcGVyYXR1cmVDZWxzaXVzID0gKGRhdGEpID0+IHtcbiAgICBjb25zdCBrZWx2aW4gPSBnZXRUZW1wZXJhdHVyZShkYXRhKTtcbiAgICBjb25zdCBjZWxzaXVzID0ga2VsdmluIC0gMjczLjE1O1xuICAgIHJldHVybiBNYXRoLnJvdW5kKGNlbHNpdXMgKiAxMDApIC8gMTAwO1xuICB9O1xuICBjb25zdCBnZXRXZWF0aGVyTWFpbiA9IChkYXRhKSA9PiBkYXRhLndlYXRoZXJbMF0ubWFpbjtcbiAgY29uc3QgZ2V0V2VhdGhlckRlc2NyaXB0aW9uID0gKGRhdGEpID0+IGRhdGEud2VhdGhlclswXS5kZXNjcmlwdGlvbjtcbiAgY29uc3QgZ2V0V2VhdGhlckljb25Db2RlID0gKGRhdGEpID0+IGRhdGEud2VhdGhlclswXS5pY29uO1xuICBjb25zdCBnZXRDaXR5TmFtZSA9IChkYXRhKSA9PiBkYXRhLm5hbWU7XG4gIGNvbnN0IGdldFJhbmRvbUNpdHlOYW1lID0gKGRhdGEpID0+IGRhdGEuZGF0YVswXS5jaXR5O1xuICByZXR1cm4ge1xuICAgIGdldFRlbXBlcmF0dXJlRmFocmVuaGVpdCxcbiAgICBnZXRUZW1wZXJhdHVyZUNlbHNpdXMsXG4gICAgZ2V0V2VhdGhlck1haW4sXG4gICAgZ2V0V2VhdGhlckRlc2NyaXB0aW9uLFxuICAgIGdldFdlYXRoZXJJY29uQ29kZSxcbiAgICBnZXRDaXR5TmFtZSxcbiAgICBnZXRSYW5kb21DaXR5TmFtZSxcbiAgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IGZpbHRlckRhdGEgfTtcbiIsImltcG9ydCB7IGZpbHRlckRhdGEgfSBmcm9tIFwiLi9maWx0ZXJfZGF0YV9tb2R1bGVcIjtcblxuY29uc3QgRE9NTWFuaXB1bGF0aW9uID0gKCgpID0+IHtcbiAgbGV0IHRpbWVyID0gZmFsc2U7XG4gIGNvbnN0IGFkZFdlYXRoZXJJY29uID0gKHdlYXRoZXJEYXRhKSA9PiB7XG4gICAgY29uc3Qgd2VhdGhlckljb24gPSBmaWx0ZXJEYXRhLmdldFdlYXRoZXJJY29uQ29kZSh3ZWF0aGVyRGF0YSk7XG4gICAgY29uc3Qgd2VhdGhlckljb25FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi53ZWF0aGVyLWljb25cIik7XG4gICAgd2VhdGhlckljb25FbGVtZW50LnNyYyA9IGBodHRwOi8vb3BlbndlYXRoZXJtYXAub3JnL2ltZy93bi8ke3dlYXRoZXJJY29ufS5wbmdgO1xuICB9O1xuICBjb25zdCBhZGRXZWF0aGVyTWFpbiA9ICh3ZWF0aGVyRGF0YSkgPT4ge1xuICAgIGNvbnN0IHdlYXRoZXJNYWluID0gZmlsdGVyRGF0YS5nZXRXZWF0aGVyTWFpbih3ZWF0aGVyRGF0YSk7XG4gICAgY29uc3Qgd2VhdGhlck1haW5FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi53ZWF0aGVyLW1haW5cIik7XG4gICAgd2VhdGhlck1haW5FbGVtZW50LnRleHRDb250ZW50ID0gd2VhdGhlck1haW47XG4gIH07XG4gIGNvbnN0IGFkZFdlYXRoZXJEZXNjcmlwdGlvbiA9ICh3ZWF0aGVyRGF0YSkgPT4ge1xuICAgIGNvbnN0IHdlYXRoZXJEZXNjcmlwdGlvbiA9IGZpbHRlckRhdGEuZ2V0V2VhdGhlckRlc2NyaXB0aW9uKHdlYXRoZXJEYXRhKTtcbiAgICBjb25zdCB3ZWF0aGVyRGVzY3JpcHRpb25FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgIFwiLndlYXRoZXItZGVzY3JpcHRpb25cIlxuICAgICk7XG4gICAgd2VhdGhlckRlc2NyaXB0aW9uRWxlbWVudC50ZXh0Q29udGVudCA9IHdlYXRoZXJEZXNjcmlwdGlvbjtcbiAgfTtcbiAgY29uc3QgYWRkVGVtcGVyYXR1cmVGYWhyZW5oZWl0ID0gKHdlYXRoZXJEYXRhKSA9PiB7XG4gICAgY29uc3QgdGVtcEYgPSBmaWx0ZXJEYXRhLmdldFRlbXBlcmF0dXJlRmFocmVuaGVpdCh3ZWF0aGVyRGF0YSk7XG4gICAgY29uc3QgdGVtcEZFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50ZW1wLWZcIik7XG4gICAgdGVtcEZFbGVtZW50LnRleHRDb250ZW50ID0gYCR7dGVtcEZ9wrBGYDtcbiAgfTtcbiAgY29uc3QgYWRkVGVtcGVyYXR1cmVDZWxzaXVzID0gKHdlYXRoZXJEYXRhKSA9PiB7XG4gICAgY29uc3QgdGVtcEMgPSBmaWx0ZXJEYXRhLmdldFRlbXBlcmF0dXJlQ2Vsc2l1cyh3ZWF0aGVyRGF0YSk7XG4gICAgY29uc3QgdGVtcENFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50ZW1wLWNcIik7XG4gICAgdGVtcENFbGVtZW50LnRleHRDb250ZW50ID0gYCR7dGVtcEN9wrBDYDtcbiAgfTtcbiAgY29uc3QgYWRkQ2l0eU5hbWUgPSAod2VhdGhlckRhdGEpID0+IHtcbiAgICBjb25zdCBjaXR5TmFtZSA9IGZpbHRlckRhdGEuZ2V0Q2l0eU5hbWUod2VhdGhlckRhdGEpO1xuICAgIGNvbnN0IGNpdHlOYW1lRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2l0eS1uYW1lXCIpO1xuICAgIGNpdHlOYW1lRWxlbWVudC50ZXh0Q29udGVudCA9IGNpdHlOYW1lO1xuICB9O1xuICBjb25zdCByZXNldElucHV0VmFsdWUgPSAoKSA9PiB7XG4gICAgY29uc3QgY2l0eUlucHV0RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY2l0eVwiKTtcbiAgICBjaXR5SW5wdXRFbGVtZW50LnZhbHVlID0gXCJcIjtcbiAgfTtcbiAgY29uc3QgYWRkUGxhY2Vob2xkZXJWYWx1ZXMgPSAoKSA9PiB7XG4gICAgY29uc3Qgd2VhdGhlckljb25FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi53ZWF0aGVyLWljb25cIik7XG4gICAgY29uc3Qgd2VhdGhlck1haW5FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi53ZWF0aGVyLW1haW5cIik7XG4gICAgY29uc3Qgd2VhdGhlckRlc2NyaXB0aW9uRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBcIi53ZWF0aGVyLWRlc2NyaXB0aW9uXCJcbiAgICApO1xuICAgIGNvbnN0IHRlbXBGRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGVtcC1mXCIpO1xuICAgIGNvbnN0IHRlbXBDRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGVtcC1jXCIpO1xuICAgIGNvbnN0IGNpdHlOYW1lRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2l0eS1uYW1lXCIpO1xuICAgIHdlYXRoZXJJY29uRWxlbWVudC5zcmMgPSBcIi4uL2Rpc3QvbWlja2V5LnBuZ1wiO1xuICAgIHdlYXRoZXJNYWluRWxlbWVudC50ZXh0Q29udGVudCA9IFwiVGhlIHN1biBtaWdodCBvciBtaWdodCBub3QgYmUgdmlzaWJsZVwiO1xuICAgIHdlYXRoZXJEZXNjcmlwdGlvbkVsZW1lbnQudGV4dENvbnRlbnQgPSBcImhvcGVmdWxseSB0aGUgc2t5IGlzIHN0aWxsIGJsdWVcIjtcbiAgICB0ZW1wRkVsZW1lbnQudGV4dENvbnRlbnQgPSBcIkxhcmdlciBudW1iZXLCsEZcIjtcbiAgICB0ZW1wQ0VsZW1lbnQudGV4dENvbnRlbnQgPSBcIlNtYWxsZXIgbnVtYmVywrBDXCI7XG4gICAgY2l0eU5hbWVFbGVtZW50LnRleHRDb250ZW50ID0gXCJEaXNuZXlsYW5kXCI7XG4gIH07XG4gIGNvbnN0IGNoYW5nZUVycm9yTWVzc2FnZSA9IChtZXNzYWdlKSA9PiB7XG4gICAgY29uc3QgZXJyb3JNZXNzYWdlRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZXJyb3ItbWVzc2FnZVwiKTtcbiAgICBlcnJvck1lc3NhZ2VFbGVtZW50LnRleHRDb250ZW50ID0gbWVzc2FnZTtcbiAgfTtcbiAgY29uc3QgdG9nZ2xlU3VibWlzc2lvbkVsZW1lbnRzRW5hYmxlZCA9ICgpID0+IHtcbiAgICBjb25zdCBzdWJtaXNzaW9uRWxlbWVudHMgPSBBcnJheS5mcm9tKFxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5zdWJtaXNzaW9uLWVsZW1lbnRcIilcbiAgICApO1xuICAgIHN1Ym1pc3Npb25FbGVtZW50cy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICBpZiAoZWxlbWVudC5kaXNhYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgZWxlbWVudC5kaXNhYmxlZCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LmRpc2FibGVkID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IHRvZ2dsZUVsZW1lbnREaXNwbGF5ID0gKGVsZW1lbnQpID0+IHtcbiAgICBlbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoXCJub3QtZGlzcGxheWVkXCIpO1xuICB9O1xuICBjb25zdCBjaGFuZ2VMb2FkaW5nTWVzc2FnZSA9IChtZXNzYWdlKSA9PiB7XG4gICAgY29uc3QgbG9hZGluZ01lc3NhZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmxvYWRpbmctbWVzc2FnZVwiKTtcbiAgICBsb2FkaW5nTWVzc2FnZS50ZXh0Q29udGVudCA9IG1lc3NhZ2U7XG4gIH07XG4gIGNvbnN0IHdhaXRUaW1lciA9IChkdXJhdGlvbikgPT5cbiAgICBuZXcgUHJvbWlzZSgocmVzcG9uc2UpID0+IHNldFRpbWVvdXQocmVzcG9uc2UsIGR1cmF0aW9uKSk7XG4gIGNvbnN0IHRvZ2dsZUxvYWRpbmdNZXNzYWdlQ3ljbGUgPSBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbG9hZGluZ0luZGljYXRvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbG9hZGluZy1pbmRpY2F0b3JcIik7XG4gICAgdGltZXIgPyAodGltZXIgPSBmYWxzZSkgOiAodGltZXIgPSB0cnVlKTtcbiAgICB3aGlsZSAodGltZXIpIHtcbiAgICAgIGF3YWl0IHdhaXRUaW1lcigxMDAwKTtcbiAgICAgIGlmIChBcnJheS5mcm9tKGxvYWRpbmdJbmRpY2F0b3IuY2xhc3NMaXN0KS5pbmNsdWRlcyhcIm5vdC1kaXNwbGF5ZWRcIikpIHtcbiAgICAgICAgY2hhbmdlTG9hZGluZ01lc3NhZ2UoXCJMb2FkaW5nLi4uXCIpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNoYW5nZUxvYWRpbmdNZXNzYWdlKFwiTG9hZGluZy5cIik7XG4gICAgICBhd2FpdCB3YWl0VGltZXIoMTAwMCk7XG4gICAgICBpZiAoQXJyYXkuZnJvbShsb2FkaW5nSW5kaWNhdG9yLmNsYXNzTGlzdCkuaW5jbHVkZXMoXCJub3QtZGlzcGxheWVkXCIpKSB7XG4gICAgICAgIGNoYW5nZUxvYWRpbmdNZXNzYWdlKFwiTG9hZGluZy4uLlwiKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjaGFuZ2VMb2FkaW5nTWVzc2FnZShcIkxvYWRpbmcuLlwiKTtcbiAgICAgIGF3YWl0IHdhaXRUaW1lcigxMDAwKTtcbiAgICAgIGNoYW5nZUxvYWRpbmdNZXNzYWdlKFwiTG9hZGluZy4uLlwiKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHRvZ2dsZUxvYWRpbmdJblByb2dyZXNzID0gKCkgPT4ge1xuICAgIGNvbnN0IGxvYWRpbmdJbmRpY2F0b3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2xvYWRpbmctaW5kaWNhdG9yXCIpO1xuICAgIHRvZ2dsZVN1Ym1pc3Npb25FbGVtZW50c0VuYWJsZWQoKTtcbiAgICB0b2dnbGVFbGVtZW50RGlzcGxheShsb2FkaW5nSW5kaWNhdG9yKTtcbiAgICB0b2dnbGVMb2FkaW5nTWVzc2FnZUN5Y2xlKCk7XG4gIH07XG4gIGNvbnN0IHVwZGF0ZURpc3BsYXllZFdlYXRoZXIgPSAod2VhdGhlckRhdGEpID0+IHtcbiAgICBhZGRXZWF0aGVySWNvbih3ZWF0aGVyRGF0YSk7XG4gICAgYWRkV2VhdGhlck1haW4od2VhdGhlckRhdGEpO1xuICAgIGFkZFdlYXRoZXJEZXNjcmlwdGlvbih3ZWF0aGVyRGF0YSk7XG4gICAgYWRkVGVtcGVyYXR1cmVGYWhyZW5oZWl0KHdlYXRoZXJEYXRhKTtcbiAgICBhZGRUZW1wZXJhdHVyZUNlbHNpdXMod2VhdGhlckRhdGEpO1xuICAgIGFkZENpdHlOYW1lKHdlYXRoZXJEYXRhKTtcbiAgICByZXNldElucHV0VmFsdWUoKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGVEaXNwbGF5ZWRXZWF0aGVyLFxuICAgIGFkZFBsYWNlaG9sZGVyVmFsdWVzLFxuICAgIGNoYW5nZUVycm9yTWVzc2FnZSxcbiAgICB0b2dnbGVFbGVtZW50RGlzcGxheSxcbiAgICB0b2dnbGVMb2FkaW5nSW5Qcm9ncmVzcyxcbiAgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IERPTU1hbmlwdWxhdGlvbiB9O1xuIiwiaW1wb3J0IHsgQVBJUmVxdWVzdCB9IGZyb20gXCIuL0FQSV9yZXF1ZXN0X21vZHVsZVwiO1xuaW1wb3J0IHsgZmlsdGVyRGF0YSB9IGZyb20gXCIuL2ZpbHRlcl9kYXRhX21vZHVsZVwiO1xuaW1wb3J0IHsgRE9NTWFuaXB1bGF0aW9uIH0gZnJvbSBcIi4vRE9NX21hbmlwdWxhdGlvbl9tb2R1bGVcIjtcblxuY29uc3QgdXNlcklucHV0ID0gKCgpID0+IHtcbiAgY29uc3Qgc3VibWl0VXNlcklucHV0ID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGNpdHlJbnB1dFZhbHVlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjaXR5XCIpLnZhbHVlO1xuICAgIGlmIChjaXR5SW5wdXRWYWx1ZSAhPT0gXCJcIikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBBUElSZXF1ZXN0LmdldENpdHlXZWF0aGVyKGNpdHlJbnB1dFZhbHVlKTtcbiAgICAgICAgRE9NTWFuaXB1bGF0aW9uLnVwZGF0ZURpc3BsYXllZFdlYXRoZXIocmVzcG9uc2UpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yLnN0YXR1cyA9PT0gNDA0KSB7XG4gICAgICAgICAgLy8gT3BlbldlYXRoZXJNYXAgQVBJIGNhbid0IGZpbmQgdGhlIGNpdHkgZHVlIHRvIG1pc3NwZWxsaW5nIG9yIGxhY2sgb2YgZGF0YVxuICAgICAgICAgIERPTU1hbmlwdWxhdGlvbi5jaGFuZ2VFcnJvck1lc3NhZ2UoXG4gICAgICAgICAgICBcIlVoIG9oLCBsb29rcyBsaWtlIHNvbWV0aGluZyB3ZW50IHdyb25nISBDaGVjayB5b3VyIHNwZWxsaW5nIG9yIHRyeSBhIGRpZmZlcmVudCBjaXR5IVwiXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChlcnJvci5zdGF0dXMgPT09IDQyOSkge1xuICAgICAgICAgIC8vIE9wZW5XZWF0aGVyTWFwIEFQSSByYXRlIGxpbWl0XG4gICAgICAgICAgRE9NTWFuaXB1bGF0aW9uLmNoYW5nZUVycm9yTWVzc2FnZShcbiAgICAgICAgICAgIFwiV2hvYSwgc2xvdyBkb3duIHRoZXJlIHBhcnRuZXIhIFNhdmUgc29tZSB3ZWF0aGVyIGRhdGEgZm9yIHRoZSByZXN0IG9mIHVzIVwiXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChlcnJvci5zdGF0dXMgPT09IDUwMCkge1xuICAgICAgICAgIERPTU1hbmlwdWxhdGlvbi5jaGFuZ2VFcnJvck1lc3NhZ2UoXG4gICAgICAgICAgICBcIlNvbWV0aGluZyBvdXQgb2Ygb3VyIGNvbnRyb2wgaXMgYnJva2VuLiBUcnkgYWdhaW4gbGF0ZXIhXCJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoRXJyb3IoZXJyb3Iuc3RhdHVzVGV4dCkpO1xuICAgICAgfVxuICAgIH1cbiAgICBET01NYW5pcHVsYXRpb24udG9nZ2xlTG9hZGluZ0luUHJvZ3Jlc3MoKTtcbiAgfTtcbiAgY29uc3Qgc3VibWl0UmFuZG9tSW5wdXQgPSBhc3luYyAoKSA9PiB7XG4gICAgbGV0IHJhbmRvbUNpdHlOYW1lO1xuICAgIGxldCB3ZWF0aGVyUmVzcG9uc2U7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGNpdHlSZXNwb25zZSA9IGF3YWl0IEFQSVJlcXVlc3QuZ2V0UmFuZG9tQ2l0eSgpO1xuICAgICAgcmFuZG9tQ2l0eU5hbWUgPSBmaWx0ZXJEYXRhLmdldFJhbmRvbUNpdHlOYW1lKGNpdHlSZXNwb25zZSk7XG4gICAgICB3ZWF0aGVyUmVzcG9uc2UgPSBhd2FpdCBBUElSZXF1ZXN0LmdldENpdHlXZWF0aGVyKHJhbmRvbUNpdHlOYW1lKTtcbiAgICAgIERPTU1hbmlwdWxhdGlvbi51cGRhdGVEaXNwbGF5ZWRXZWF0aGVyKHdlYXRoZXJSZXNwb25zZSk7XG4gICAgICBET01NYW5pcHVsYXRpb24udG9nZ2xlTG9hZGluZ0luUHJvZ3Jlc3MoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaWYgKGVycm9yLnN0YXR1cyA9PT0gNDA0ICYmIHJhbmRvbUNpdHlOYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gR2VvREIgQVBJIGVycm9yXG4gICAgICAgIERPTU1hbmlwdWxhdGlvbi5jaGFuZ2VFcnJvck1lc3NhZ2UoXG4gICAgICAgICAgXCJIbW0sIGl0IHNlZW1zIGxpa2Ugd2UncmUgcnVubmluZyBpbnRvIHNvbWUgdHJvdWJsZS4gVHJ5IGFnYWluIVwiXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAoZXJyb3Iuc3RhdHVzID09PSA0MDQgJiYgd2VhdGhlclJlc3BvbnNlID09PSB1bmRlZmluZWQpIHx8XG4gICAgICAgIGVycm9yLnN0YXR1cyA9PT0gNDI5XG4gICAgICApIHtcbiAgICAgICAgLy8gR2VvREIgZ2F2ZSBhIGNpdHkgdGhhdCBoYXMgbm8gZGF0YSBpbiBPcGVuV2VhdGhlck1hcCBBUElcbiAgICAgICAgc2V0VGltZW91dChzdWJtaXRSYW5kb21JbnB1dCwgMTUwMCk7XG4gICAgICB9IGVsc2UgaWYgKGVycm9yLnN0YXR1cyA9PT0gNTAwKSB7XG4gICAgICAgIERPTU1hbmlwdWxhdGlvbi5jaGFuZ2VFcnJvck1lc3NhZ2UoXG4gICAgICAgICAgXCJTb21ldGhpbmcgb3V0IG9mIG91ciBjb250cm9sIGlzIGJyb2tlbi4gVHJ5IGFnYWluIGxhdGVyIVwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjb25zb2xlLmVycm9yKEVycm9yKGAke2Vycm9yLnN0YXR1c30gJHtlcnJvci5zdGF0dXNUZXh0fWApKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGFkZFNlYXJjaEJ1dHRvbkxpc3RlbmVyID0gKCkgPT4ge1xuICAgIGNvbnN0IHNlYXJjaEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2VhcmNoLWJ1dHRvblwiKTtcbiAgICBzZWFyY2hCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIERPTU1hbmlwdWxhdGlvbi5jaGFuZ2VFcnJvck1lc3NhZ2UoXCJcIiksXG4gICAgICAgIERPTU1hbmlwdWxhdGlvbi50b2dnbGVMb2FkaW5nSW5Qcm9ncmVzcygpLFxuICAgICAgICBzdWJtaXRVc2VySW5wdXQoKTtcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgYWRkSW5wdXRFbGVtZW50TGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgY29uc3QgY2l0eUlucHV0RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY2l0eVwiKTtcbiAgICBjaXR5SW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIChldmVudCkgPT4ge1xuICAgICAgaWYgKGV2ZW50LmtleSA9PT0gXCJFbnRlclwiKSB7XG4gICAgICAgIERPTU1hbmlwdWxhdGlvbi5jaGFuZ2VFcnJvck1lc3NhZ2UoXCJcIiksXG4gICAgICAgICAgRE9NTWFuaXB1bGF0aW9uLnRvZ2dsZUxvYWRpbmdJblByb2dyZXNzKCksXG4gICAgICAgICAgc3VibWl0VXNlcklucHV0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IGFkZFJhbmRvbUJ1dHRvbkxpc3RlbmVyID0gKCkgPT4ge1xuICAgIGNvbnN0IHJhbmRvbUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucmFuZG9tLWJ1dHRvblwiKTtcbiAgICByYW5kb21CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIERPTU1hbmlwdWxhdGlvbi5jaGFuZ2VFcnJvck1lc3NhZ2UoXCJcIiksXG4gICAgICAgIERPTU1hbmlwdWxhdGlvbi50b2dnbGVMb2FkaW5nSW5Qcm9ncmVzcygpLFxuICAgICAgICBzdWJtaXRSYW5kb21JbnB1dCgpO1xuICAgIH0pO1xuICB9O1xuICBjb25zdCBhZGRUZW1wZXJhdHVyZUJ1dHRvbkxpc3RlbmVycyA9ICgpID0+IHtcbiAgICBjb25zdCB0ZW1wQnV0dG9ucyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi50ZW1wLWJ1dHRvblwiKSk7XG4gICAgdGVtcEJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uKSA9PiB7XG4gICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgdGVtcEJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uKSA9PiB7XG4gICAgICAgICAgRE9NTWFuaXB1bGF0aW9uLnRvZ2dsZUVsZW1lbnREaXNwbGF5KGJ1dHRvbik7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IGFkZFVzZXJJbnB1dExpc3RlbmVycyA9ICgpID0+IHtcbiAgICBhZGRTZWFyY2hCdXR0b25MaXN0ZW5lcigpO1xuICAgIGFkZElucHV0RWxlbWVudExpc3RlbmVyKCk7XG4gICAgYWRkUmFuZG9tQnV0dG9uTGlzdGVuZXIoKTtcbiAgICBhZGRUZW1wZXJhdHVyZUJ1dHRvbkxpc3RlbmVycygpO1xuICB9O1xuICByZXR1cm4geyBhZGRVc2VySW5wdXRMaXN0ZW5lcnMgfTtcbn0pKCk7XG5cbmV4cG9ydCB7IHVzZXJJbnB1dCB9O1xuIiwiaW1wb3J0IHsgQVBJUmVxdWVzdCB9IGZyb20gXCIuL0FQSV9yZXF1ZXN0X21vZHVsZVwiO1xuaW1wb3J0IHsgdXNlcklucHV0IH0gZnJvbSBcIi4vdXNlcl9pbnB1dF9tb2R1bGVcIjtcbmltcG9ydCB7IERPTU1hbmlwdWxhdGlvbiB9IGZyb20gXCIuL0RPTV9tYW5pcHVsYXRpb25fbW9kdWxlXCI7XG5cbihhc3luYyBmdW5jdGlvbiBpbml0aWFsaXplUGFnZSgpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IEFQSVJlcXVlc3QuZ2V0Q2l0eVdlYXRoZXIoXCJIZWxsXCIpO1xuICAgIERPTU1hbmlwdWxhdGlvbi51cGRhdGVEaXNwbGF5ZWRXZWF0aGVyKHJlc3BvbnNlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBET01NYW5pcHVsYXRpb24uYWRkUGxhY2Vob2xkZXJWYWx1ZXMoKTtcbiAgICBjb25zb2xlLmVycm9yKFxuICAgICAgRXJyb3IoXG4gICAgICAgIGAke2Vycm9yLnN0YXR1c30gJHtlcnJvci5zdGF0dXNUZXh0fS4gSWYgeW91IGNhbiBzZWUgdGhpcywgdGhhdCBtZWFucyB0aGVyZSB3YXMgYW4gaXNzdWUgd2l0aCB0aGUgT3BlbldlYXRoZXJNYXAgQVBJIWBcbiAgICAgIClcbiAgICApO1xuICB9XG59KSgpO1xuXG51c2VySW5wdXQuYWRkVXNlcklucHV0TGlzdGVuZXJzKCk7XG4iXSwibmFtZXMiOlsiQVBJUmVxdWVzdCIsImFzeW5jIiwiY2l0eSIsInJlc3BvbnNlIiwiZmV0Y2giLCJzdGF0dXMiLCJqc29uIiwiUHJvbWlzZSIsInJlamVjdCIsInJhbmRvbUNpdHlJbmRleCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsIm1ldGhvZCIsImhlYWRlcnMiLCJmaWx0ZXJEYXRhIiwiZ2V0VGVtcGVyYXR1cmUiLCJkYXRhIiwibWFpbiIsInRlbXAiLCJnZXRUZW1wZXJhdHVyZUZhaHJlbmhlaXQiLCJmYWhyZW5oZWl0Iiwicm91bmQiLCJnZXRUZW1wZXJhdHVyZUNlbHNpdXMiLCJjZWxzaXVzIiwiZ2V0V2VhdGhlck1haW4iLCJ3ZWF0aGVyIiwiZ2V0V2VhdGhlckRlc2NyaXB0aW9uIiwiZGVzY3JpcHRpb24iLCJnZXRXZWF0aGVySWNvbkNvZGUiLCJpY29uIiwiZ2V0Q2l0eU5hbWUiLCJuYW1lIiwiZ2V0UmFuZG9tQ2l0eU5hbWUiLCJET01NYW5pcHVsYXRpb24iLCJ0aW1lciIsInRvZ2dsZUVsZW1lbnREaXNwbGF5IiwiZWxlbWVudCIsImNsYXNzTGlzdCIsInRvZ2dsZSIsImNoYW5nZUxvYWRpbmdNZXNzYWdlIiwibWVzc2FnZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInRleHRDb250ZW50Iiwid2FpdFRpbWVyIiwiZHVyYXRpb24iLCJzZXRUaW1lb3V0IiwidXBkYXRlRGlzcGxheWVkV2VhdGhlciIsIndlYXRoZXJEYXRhIiwid2VhdGhlckljb24iLCJzcmMiLCJhZGRXZWF0aGVySWNvbiIsIndlYXRoZXJNYWluIiwiYWRkV2VhdGhlck1haW4iLCJ3ZWF0aGVyRGVzY3JpcHRpb24iLCJhZGRXZWF0aGVyRGVzY3JpcHRpb24iLCJ0ZW1wRiIsImFkZFRlbXBlcmF0dXJlRmFocmVuaGVpdCIsInRlbXBDIiwiYWRkVGVtcGVyYXR1cmVDZWxzaXVzIiwiY2l0eU5hbWUiLCJhZGRDaXR5TmFtZSIsInZhbHVlIiwiYWRkUGxhY2Vob2xkZXJWYWx1ZXMiLCJ3ZWF0aGVySWNvbkVsZW1lbnQiLCJ3ZWF0aGVyTWFpbkVsZW1lbnQiLCJ3ZWF0aGVyRGVzY3JpcHRpb25FbGVtZW50IiwidGVtcEZFbGVtZW50IiwidGVtcENFbGVtZW50IiwiY2l0eU5hbWVFbGVtZW50IiwiY2hhbmdlRXJyb3JNZXNzYWdlIiwidG9nZ2xlTG9hZGluZ0luUHJvZ3Jlc3MiLCJsb2FkaW5nSW5kaWNhdG9yIiwiQXJyYXkiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJkaXNhYmxlZCIsImluY2x1ZGVzIiwidG9nZ2xlTG9hZGluZ01lc3NhZ2VDeWNsZSIsInVzZXJJbnB1dCIsInN1Ym1pdFVzZXJJbnB1dCIsImNpdHlJbnB1dFZhbHVlIiwiZXJyb3IiLCJjb25zb2xlIiwiRXJyb3IiLCJzdGF0dXNUZXh0Iiwic3VibWl0UmFuZG9tSW5wdXQiLCJyYW5kb21DaXR5TmFtZSIsIndlYXRoZXJSZXNwb25zZSIsImNpdHlSZXNwb25zZSIsInVuZGVmaW5lZCIsImFkZFVzZXJJbnB1dExpc3RlbmVycyIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsImtleSIsInRlbXBCdXR0b25zIiwiYnV0dG9uIiwiYWRkVGVtcGVyYXR1cmVCdXR0b25MaXN0ZW5lcnMiXSwic291cmNlUm9vdCI6IiJ9