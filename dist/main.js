(()=>{"use strict";const e=async e=>{const t=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${e}&appid=a0c9839361f301aa4ff8bb089dde2d79`);return 200===t.status?await t.json():Promise.reject(t)},t=async()=>{const e=Math.floor(508061*Math.random())-1,t=await fetch(`https://wft-geo-db.p.rapidapi.com/v1/geo/cities?limit=1&includeDeleted=NONE&offset=${e}`,{method:"GET",headers:{"X-RapidAPI-Key":"807ea18ec2msh3a2175b27cf041dp170feajsnf745f5536e94","X-RapidAPI-Host":"wft-geo-db.p.rapidapi.com"}});return 200===t.status?await t.json():Promise.reject(t)},r=(()=>{const e=e=>e.main.temp;return{getTemperatureFahrenheit:t=>{const r=9*(e(t)-273.15)/5+32;return Math.round(100*r)/100},getTemperatureCelsius:t=>{const r=e(t)-273.15;return Math.round(100*r)/100},getWeatherMain:e=>e.weather[0].main,getWeatherDescription:e=>e.weather[0].description,getWeatherIconCode:e=>e.weather[0].icon,getCityName:e=>e.name,getRandomCityName:e=>e.data[0].city}})(),o=(()=>{let e=!1;const t=e=>{e.classList.toggle("not-displayed")},o=e=>{document.querySelector(".loading-message").textContent=e},a=e=>new Promise((t=>setTimeout(t,e)));return{updateDisplayedWeather:e=>{(e=>{const t=r.getWeatherIconCode(e);document.querySelector(".weather-icon").src=`http://openweathermap.org/img/wn/${t}.png`})(e),(e=>{const t=r.getWeatherMain(e);document.querySelector(".weather-main").textContent=t})(e),(e=>{const t=r.getWeatherDescription(e);document.querySelector(".weather-description").textContent=t})(e),(e=>{const t=r.getTemperatureFahrenheit(e);document.querySelector(".temp-f").textContent=`${t}째F`})(e),(e=>{const t=r.getTemperatureCelsius(e);document.querySelector(".temp-c").textContent=`${t}째C`})(e),(e=>{const t=r.getCityName(e);document.querySelector(".city-name").textContent=t})(e),document.querySelector("#city").value=""},addPlaceholderValues:()=>{const e=document.querySelector(".weather-icon"),t=document.querySelector(".weather-main"),r=document.querySelector(".weather-description"),o=document.querySelector(".temp-f"),a=document.querySelector(".temp-c"),n=document.querySelector(".city-name");e.src="../dist/mickey.png",t.textContent="The sun might or might not be visible",r.textContent="hopefully the sky is still blue",o.textContent="Larger number째F",a.textContent="Smaller number째C",n.textContent="Disneyland"},changeErrorMessage:e=>{document.querySelector(".error-message").textContent=e},toggleElementDisplay:t,toggleLoadingInProgress:()=>{const r=document.querySelector("#loading-indicator");Array.from(document.querySelectorAll(".submission-element")).forEach((e=>{!1===e.disabled?e.disabled=!0:e.disabled=!1})),t(r),(async()=>{const t=document.querySelector("#loading-indicator");for(e=!e;e;){if(await a(1e3),Array.from(t.classList).includes("not-displayed")){o("Loading...");break}if(o("Loading."),await a(1e3),Array.from(t.classList).includes("not-displayed")){o("Loading...");break}o("Loading.."),await a(1e3),o("Loading...")}})()}}})(),a=(()=>{const a=async()=>{const t=document.querySelector("#city").value;if(""!==t)try{const r=await e(t);o.updateDisplayedWeather(r)}catch(e){404===e.status?o.changeErrorMessage("Uh oh, looks like something went wrong! Check your spelling or try a different city!"):429===e.status?o.changeErrorMessage("Whoa, slow down there partner! Save some weather data for the rest of us!"):500===e.status&&o.changeErrorMessage("Something out of our control is broken. Try again later!"),console.error(Error(e.statusText))}o.toggleLoadingInProgress()},n=async()=>{let a,s;try{const n=await t();a=r.getRandomCityName(n),s=await e(a),o.updateDisplayedWeather(s),o.toggleLoadingInProgress()}catch(e){404===e.status&&void 0===a?o.changeErrorMessage("Hmm, it seems like we're running into some trouble. Try again!"):404===e.status&&void 0===s||429===e.status?setTimeout(n,1500):500===e.status&&o.changeErrorMessage("Something out of our control is broken. Try again later!"),console.error(Error(`${e.status} ${e.statusText}`))}};return{addUserInputListeners:()=>{document.querySelector(".search-button").addEventListener("click",(()=>{o.toggleLoadingInProgress(),a()})),document.querySelector("#city").addEventListener("keydown",(e=>{"Enter"===e.key&&(o.toggleLoadingInProgress(),a())})),document.querySelector(".random-button").addEventListener("click",(()=>{o.toggleLoadingInProgress(),n()})),(()=>{const e=Array.from(document.querySelectorAll(".temp-button"));e.forEach((t=>{t.addEventListener("click",(()=>{e.forEach((e=>{o.toggleElementDisplay(e)}))}))}))})()}}})();!async function(){try{const t=await e("Hell");o.updateDisplayedWeather(t)}catch(e){o.addPlaceholderValues(),console.error(Error(`${e.status} ${e.statusText}. If you can see this, that means there was an issue with the OpenWeatherMap API!`))}}(),a.addUserInputListeners()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,