(()=>{"use strict";const e=async e=>{const t=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${e}&appid=a0c9839361f301aa4ff8bb089dde2d79`);return 200===t.status?await t.json():Promise.reject(t)},t=(()=>{const e=e=>e.main.temp;return{getTemperatureFahrenheit:t=>{const r=9*(e(t)-273.15)/5+32;return Math.round(100*r)/100},getTemperatureCelsius:t=>{const r=e(t)-273.15;return Math.round(100*r)/100},getWeatherMain:e=>e.weather[0].main,getWeatherDescription:e=>e.weather[0].description,getWeatherIconCode:e=>e.weather[0].icon,getCityName:e=>e.name}})(),r=e=>{const r=t.getWeatherIconCode(e);document.querySelector(".weather-icon").src=`http://openweathermap.org/img/wn/${r}.png`},n=e=>{const r=t.getWeatherMain(e);document.querySelector(".weather-main").textContent=r},o=e=>{const r=t.getWeatherDescription(e);document.querySelector(".weather-description").textContent=r},c=e=>{const r=t.getTemperatureFahrenheit(e);document.querySelector(".temp-f").textContent=`${r}°F`},a=e=>{const r=t.getTemperatureCelsius(e);document.querySelector(".temp-c").textContent=`${r}°C`},s=e=>{const r=t.getCityName(e);document.querySelector(".city-name").textContent=r},u=()=>{document.querySelector("#city").value=""};(()=>{const t=async()=>{const t=document.querySelector("#city").value;if(""!==t)try{const i=await e(t);r(i),n(i),o(i),c(i),a(i),s(i),u()}catch(e){console.error(Error(e.statusText))}};return{addUserInputListener:()=>{const e=document.querySelector(".search-button"),r=document.querySelector("#city");e.addEventListener("click",t),r.addEventListener("keydown",(e=>{"Enter"===e.key&&t()}))}}})().addUserInputListener()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,